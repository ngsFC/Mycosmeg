breaks = breaksList1,
border_color = "Black",
annotation_col = ann.column,
cutree_cols = 3,
main = "DMPs Heatmap DBeta",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
annotation_colors = samplecolor,
show_rownames = FALSE,
show_colnames = TRUE)
pheatmap::pheatmap(myCombat.DMPs.delta,
color = colorRampPalette(c("Blue","white","firebrick3"))(length(breaksList1)),
breaks = breaksList1,
border_color = "Black",
annotation_col = ann.column,
cutree_cols = 3,
main = "DMPs Heatmap DBeta",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
annotation_colors = samplecolor,
show_rownames = TRUE,
show_colnames = TRUE)
pheatmap::pheatmap(myCombat.DMPs.delta,
color = colorRampPalette(c("Blue","white","firebrick3"))(length(breaksList1)),
breaks = breaksList1,
border_color = "Black",
annotation_col = ann.column,
cutree_cols = 3,
main = "DMPs Heatmap DBeta",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
annotation_colors = samplecolor,
show_rownames = TRUE,
show_colnames = TRUE)
myCombatB <- log2(myCombat/(1-myCombat))
design <- model.matrix(~interest, data=as.data.frame(myCombatB))
myannotation <- cpg.annotate("array", myCombatB, what = "M",
analysis.type="differential", design=design, fdr = 0.05, arraytype = "EPIC", coef = "interestCase")
dmrcoutput <- dmrcate(myannotation, lambda=1000, C=2, min.cpgs = 5)
results.ranges <- as.data.frame(extractRanges(dmrcoutput, genome="hg19"))
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
results.range <- as.data.frame(results.ranges) %>%
#filter(meandiff >= 0.10 | meandiff <= -0.10) %>%
dplyr::select(seqnames, start, end)
write.table(results.range,
"DMR.KS.txt",
row.names = FALSE,
sep="\t",
quote = FALSE,
append = FALSE,
col.names = TRUE)
files <- list(DMRs = "DMR.KS.txt")
peakAnnoList <- lapply(files, annotatePeak, TxDb=txdb,
tssRegion=c(-3000, 500), annoDb = "org.Hs.eg.db", verbose=FALSE)
myanno <- as.data.frame(peakAnnoList)
mydmr <- as.data.frame(results.ranges) %>%
#filter(meandiff >= 0.10 | meandiff <= -0.10) %>%
dplyr::select(seqnames, start, end, meandiff)
colnames(mydmr) <- c("DMRs.seqnames", "DMRs.start", "DMRs.end", "meandiff")
join.anno <- merge(myanno, mydmr, by = c("DMRs.seqnames", "DMRs.end"))
dim(join.anno)
range.bed <- join.anno %>%
dplyr::select(DMRs.seqnames, DMRs.start.x, DMRs.end, DMRs.annotation, DMRs.geneId, DMRs.SYMBOL, DMRs.GENENAME, meandiff) %>%
filter(grepl("Promoter", DMRs.annotation))
write.table(range.bed, "dmrs.bed", col.names = F, row.names = F, sep = "\t", quote = F)
range.bed <- range.bed %>%
mutate(nDMR = 1:nrow(range.bed)) %>%
mutate(genes = paste(DMRs.SYMBOL, nDMR, sep = "__")) %>%
dplyr::select(-c(nDMR))
write.table(range.bed, "dmrs.bed", col.names = F, row.names = F, sep = "\t", quote = F)
range.bed
x <- range.bed %>%
dplyr::select(DMRs.seqnames, DMRs.start.x, DMRs.end, genes)
colnames(x) <- c("chrom", "start", "end", "gene")
a <- bed_intersect(x, bedEPIC) %>%
dplyr::select(probeID.y, gene.x) %>%
as.data.frame()
colnames(a) <- c("probeID", "gene")
df <- as.data.frame(myCombat) %>%
rownames_to_column("probeID") %>%
full_join(a) %>%
filter(!is.na(gene), !is.na(A.A)) %>%
dplyr::select(-probeID) %>%
group_by(gene) %>%
dplyr::summarise_all("mean") %>%
column_to_rownames("gene") %>%
as.data.frame()
df.mut <- df %>%
mutate(Controls = rowMeans(df[,c(1:10)]),
Casem = rowMeans(df[,c(11:14)]))
dfKS <- df.mut
myCombat.dmrs.agg.delta <- (df.mut - df.mut[,15])
myCombat.dmrs.agg.delta <- myCombat.dmrs.agg.delta[,-c(15:17)]
pca <- t(myCombat.dmrs.agg.delta)
pca <- as.data.frame(pca)
pca["Color"] <- as.character(myLoad$pd$Sample_Group)
ma <- pca[c(1:(length(pca)-1))]
PCma <- prcomp(ma, center=T,scale.=T)
PCma.gr <- data.frame(PCma$x, Color=pca$Color)
PCs <- round(PCma$sdev^2 / sum(PCma$sdev^2) * 100, 2)
PCs <- paste(colnames(PCma.gr), "(", paste(as.character(PCs), "%", ")", sep=""))
a <- ggplot(PCma.gr,aes(x=PC1, y=PC2, col=Color, label=rownames(PCma.gr))) +
xlab(PCs[1]) +
ylab(PCs[2]) +
geom_point(size=2,alpha=1,aes(shape=Color)) +
theme_classic() +
xlim(-10,10) +
ylim(-10,10) +
scale_shape_manual(values=c(17,18)) +
scale_color_manual(values=c("steelblue", "forestgreen")) +
ggtitle("DMRs KS vs Controls")
ggplotly(a)
read.table("/home/francescoc/Desktop/check.mean")
a <- read.table("/home/francescoc/Desktop/check.mean")
a
colMeans(a)
a <- read.table("/home/francescoc/Desktop/check.mean")
colMeans(a)
a <- read.table("/home/francescoc/Desktop/check.mean")
colMeans(a)
a <- read.table("/home/francescoc/Desktop/check.mean")
colMeans(a)
a <- read.table("/home/francescoc/Desktop/check.mean")
colMeans(a)
knitr::opts_chunk$set("/home/francescoc/Desktop/Project/Merla_lab/Marray_Merla")
knitr::opts_chunk$set(warning=FALSE, message=FALSE, fig.height=5, fig.width=10, fig.align = "center", class.source = "hide", echo = knitr::is_html_output())
#class.source = "foldable"
#class.source = "hide"
library("ChAMP")
library("RColorBrewer")
library("tidyverse")
library("quadprog")
library("vegan")
library("stringr")
library("factoextra")
library("viridis")
library("rmdformats")
library("pheatmap")
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
library("ChIPseeker")
library("gprofiler2")
library("VennDiagram")
library("limma")
library("plotly")
library("cowplot")
library("ReactomePA")
library("knitr")
library("rmarkdown")
library("kableExtra")
library("reshape")
library("gridExtra")
library("grid")
library("ggpubr")
library("valr")
library("IlluminaHumanMethylationEPICanno.ilm10b4.hg19")
library("IlluminaHumanMethylationEPICmanifest")
library("patchwork")
methylationarray <- "EPIC"
norm <- "BMIQ"
testDir <- "/home/francescoc/Desktop/Project/Merla_lab/Marray_Merla"
breaksList1 <- seq(-0.5, 0.5, by = 0.01)
breaksList <- seq(0, 1, by = 0.01)
annEPIC <- getAnnotation(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
bedEPIC <- as.data.frame(annEPIC) %>%
rownames_to_column("probeID") %>%
dplyr::select(chr, pos, probeID) %>%
mutate(end = pos) %>%
relocate(end, .after = pos)
colnames(bedEPIC) <- c("chrom", "start", "end", "probeID")
annotation <- data.frame(rownames(annEPIC), annEPIC$UCSC_RefGene_Name, annEPIC$UCSC_RefGene_Group)
colnames(annotation) <- c("probeID", "Gene", "feature")
all.genes <- annotation %>%
dplyr::select(Gene, feature) %>%
separate_rows(Gene, feature, sep = ";")
all.genes.TSS <- annotation %>%
filter(grepl("TSS200", feature) | grepl("TSS1500", feature))
all.genes.TSS <- all.genes.TSS %>%
dplyr::select(Gene, feature) %>%
separate_rows(Gene, feature, sep = ";") %>%
filter(feature == "TSS200" | feature == "TSS1500")
bg.genes <- unique(all.genes$Gene)
bg.genes.TSS <- unique(all.genes.TSS$Gene)
myLoad <- champ.load(testDir,
method="ChAMP",
methValue="B",
autoimpute=TRUE,
filterDetP=TRUE,
ProbeCutoff=0,
SampleCutoff=0.1,
detPcut=0.01,
filterBeads=TRUE,
beadCutoff=0.05,
filterNoCG=TRUE,
filterSNPs=TRUE,
population=NULL,
filterMultiHit=TRUE,
filterXY=TRUE,
force=FALSE,
arraytype=methylationarray)
ann.column <- data.frame(Sample = myLoad$pd$Sample_Group,
Syndrome = myLoad$pd$Syndrome)
rownames(ann.column) <- myLoad$pd$Sample_Name
samplecolor <- list(Sample = c(Control = "Grey", Case = "Steel blue"),
Syndrome = c(KS="Red", BWS="Purple", DS="orange", RSTS="forest green", Control = "Grey"))
#myLoad$pd$Slide <- as.numeric(myLoad$pd$Slide)
myLoad$pd$Slide <- as.character(myLoad$pd$Slide)
myNorm <- champ.norm(beta=myLoad$beta,
arraytype=methylationarray,
method=norm,
plotBMIQ = TRUE,
cores = 8)
champ.SVD(beta = myNorm,
PDFplot = TRUE,
pd = myLoad$pd,
RGEffect = FALSE)
myCombat <- champ.runCombat(beta=myNorm,
variablename="Syndrome",
pd=myLoad$pd,
batchname=c("Array"),
logitTrans=TRUE
)
champ.SVD(beta=myCombat,
PDFplot=TRUE,
pd=myLoad$pd,
RGEffect=FALSE
)
#myCombat <- myNorm
sign <- read.csv("./../EpiSign.csv")
sign <- read.csv("/home/francescoc/Desktop/Project/Merla_lab/EpiSign.csv")
sign
colnames(fmnwmj)
colnames(sign)
sign %>% filter(Kabuki == 1)
sign.KS <- sign %>% filter(Kabuki == 1)
myCombat %>% filter(rownames(myCombat) %in% sign.KS$Probes)
as.data.frame(myCombat) %>% filter(rownames(myCombat) %in% sign.KS$Probes)
myCombat.sign <- as.data.frame(myCombat) %>% filter(rownames(myCombat) %in% sign.KS$Probes)
pca <- t(myCombat.sign)
pca <- as.data.frame(pca)
pca["Color"] <- as.character(myLoad$pd$Syndrome)
ma <- pca[c(1:(length(pca)-1))]
PCma <- prcomp(ma, center=T,scale.=T)
PCma.gr <- data.frame(PCma$x, Color=pca$Color)
PCs <- round(PCma$sdev^2 / sum(PCma$sdev^2) * 100, 2)
PCs <- paste(colnames(PCma.gr), "(", paste(as.character(PCs), "%", ")", sep=""))
a <- ggplot(PCma.gr,aes(x=PC1, y=PC2, col=Color, label=rownames(PCma.gr))) +
xlab(PCs[1]) +
ylab(PCs[2]) +
geom_point(size=2,alpha=1,aes(shape=Color)) +
theme_classic() +
xlim(-1000,1000) +
ylim(-1000,1000) +
scale_shape_manual(values=c(17,18,17,17,17)) +
scale_color_manual(values=c("purple", "grey", "orange", "red", "forest green")) +
ggtitle("PCA all probes")
ggplotly(a)
a <- ggplot(PCma.gr,aes(x=PC1, y=PC2, col=Color, label=rownames(PCma.gr))) +
xlab(PCs[1]) +
ylab(PCs[2]) +
geom_point(size=2,alpha=1,aes(shape=Color)) +
theme_classic() +
xlim(-50,50) +
ylim(-50,50) +
scale_shape_manual(values=c(17,18,17,17,17)) +
scale_color_manual(values=c("purple", "grey", "orange", "red", "forest green")) +
ggtitle("PCA all probes")
a
ggplotly(a)
a <- ggplot(PCma.gr,aes(x=PC1, y=PC2, col=Color, label=rownames(PCma.gr))) +
xlab(PCs[1]) +
ylab(PCs[2]) +
geom_point(size=2,alpha=1,aes(shape=Color)) +
theme_classic() +
xlim(-25,25) +
ylim(-25,25) +
scale_shape_manual(values=c(17,18,17,17,17)) +
scale_color_manual(values=c("purple", "grey", "orange", "red", "forest green")) +
ggtitle("PCA all probes")
ggplotly(a)
View(sign.KS)
colnames(sign.KS)
sign.KS <- sign %>% filter(Kabuki == 1) %>% dplyr::select(-Kabuki)
sign.KS <- sign.KS[rowSums(sign.KS)<=0,]
colnames(sign.KS)
sign.KS <- sign.KS[rowSums(sign.KS[,-c(1:3)])<=0,]
sign.KS
colnames(sign.KS)
myCombat.sign <- as.data.frame(myCombat) %>% filter(rownames(myCombat) %in% sign.KS$Probes)
dim(myCombat.sign)
dim(sign.KS)
pca <- t(myCombat.sign)
pca <- as.data.frame(pca)
pca["Color"] <- as.character(myLoad$pd$Syndrome)
ma <- pca[c(1:(length(pca)-1))]
PCma <- prcomp(ma, center=T,scale.=T)
PCma.gr <- data.frame(PCma$x, Color=pca$Color)
PCs <- round(PCma$sdev^2 / sum(PCma$sdev^2) * 100, 2)
PCs <- paste(colnames(PCma.gr), "(", paste(as.character(PCs), "%", ")", sep=""))
a <- ggplot(PCma.gr,aes(x=PC1, y=PC2, col=Color, label=rownames(PCma.gr))) +
xlab(PCs[1]) +
ylab(PCs[2]) +
geom_point(size=2,alpha=1,aes(shape=Color)) +
theme_classic() +
xlim(-25,25) +
ylim(-25,25) +
scale_shape_manual(values=c(17,18,17,17,17)) +
scale_color_manual(values=c("purple", "grey", "orange", "red", "forest green")) +
ggtitle("PCA all probes")
ggplotly(a)
a
sign.KS <- sign %>% filter(Kabuki == 1) %>% dplyr::select(-Kabuki)
dim(sign.KS)
sign.KS <- sign.KS[rowSums(sign.KS[,-c(1:3)])<=0,]
dim(sign.KS)
myCombat.sign <- as.data.frame(myCombat) %>% filter(rownames(myCombat) %in% sign.KS$Probes)
dim(myCombat.sign)
pca <- t(myCombat.sign)
pca <- as.data.frame(pca)
pca["Color"] <- as.character(myLoad$pd$Syndrome)
ma <- pca[c(1:(length(pca)-1))]
PCma <- prcomp(ma, center=T,scale.=T)
PCma.gr <- data.frame(PCma$x, Color=pca$Color)
PCs <- round(PCma$sdev^2 / sum(PCma$sdev^2) * 100, 2)
PCs <- paste(colnames(PCma.gr), "(", paste(as.character(PCs), "%", ")", sep=""))
a <- ggplot(PCma.gr,aes(x=PC1, y=PC2, col=Color, label=rownames(PCma.gr))) +
xlab(PCs[1]) +
ylab(PCs[2]) +
geom_point(size=2,alpha=1,aes(shape=Color)) +
theme_classic() +
xlim(-25,25) +
ylim(-25,25) +
scale_shape_manual(values=c(17,18,17,17,17)) +
scale_color_manual(values=c("purple", "grey", "orange", "red", "forest green")) +
ggtitle("PCA all probes")
a
myNorm.sign <- as.data.frame(myNorm) %>% filter(rownames(myNorm) %in% sign.KS$Probes)
pca <- t(myNorm.sign)
pca <- as.data.frame(pca)
pca["Color"] <- as.character(myLoad$pd$Syndrome)
ma <- pca[c(1:(length(pca)-1))]
PCma <- prcomp(ma, center=T,scale.=T)
PCma.gr <- data.frame(PCma$x, Color=pca$Color)
PCs <- round(PCma$sdev^2 / sum(PCma$sdev^2) * 100, 2)
PCs <- paste(colnames(PCma.gr), "(", paste(as.character(PCs), "%", ")", sep=""))
a <- ggplot(PCma.gr,aes(x=PC1, y=PC2, col=Color, label=rownames(PCma.gr))) +
xlab(PCs[1]) +
ylab(PCs[2]) +
geom_point(size=2,alpha=1,aes(shape=Color)) +
theme_classic() +
xlim(-25,25) +
ylim(-25,25) +
scale_shape_manual(values=c(17,18,17,17,17)) +
scale_color_manual(values=c("purple", "grey", "orange", "red", "forest green")) +
ggtitle("PCA all probes")
a
ggplotly(a)
pca <- t(myCombat.sign)
pca <- as.data.frame(pca)
pca["Color"] <- as.character(myLoad$pd$Syndrome)
ma <- pca[c(1:(length(pca)-1))]
PCma <- prcomp(ma, center=T,scale.=T)
PCma.gr <- data.frame(PCma$x, Color=pca$Color)
PCs <- round(PCma$sdev^2 / sum(PCma$sdev^2) * 100, 2)
PCs <- paste(colnames(PCma.gr), "(", paste(as.character(PCs), "%", ")", sep=""))
a <- ggplot(PCma.gr,aes(x=PC1, y=PC2, col=Color, label=rownames(PCma.gr))) +
xlab(PCs[1]) +
ylab(PCs[2]) +
geom_point(size=2,alpha=1,aes(shape=Color)) +
theme_classic() +
xlim(-25,25) +
ylim(-25,25) +
scale_shape_manual(values=c(17,18,17,17,17)) +
scale_color_manual(values=c("purple", "grey", "orange", "red", "forest green")) +
ggtitle("PCA all probes")
a
ggplotly(a)
colnames(myCombat.sign)
myLoad$pd$Syndrome
pca <- t(myCombat.sign[,c(1:7,12)])
pca <- as.data.frame(pca)
pca["Color"] <- as.character(myLoad$pd$Syndrome)
ma <- pca[c(1:(length(pca)-1))]
PCma <- prcomp(ma, center=T,scale.=T)
pca["Color"] <- as.character(myLoad$pd$Syndrome[c(1:7,12)])
ma <- pca[c(1:(length(pca)-1))]
PCma <- prcomp(ma, center=T,scale.=T)
PCma.gr <- data.frame(PCma$x, Color=pca$Color)
PCs <- round(PCma$sdev^2 / sum(PCma$sdev^2) * 100, 2)
PCs <- paste(colnames(PCma.gr), "(", paste(as.character(PCs), "%", ")", sep=""))
a <- ggplot(PCma.gr,aes(x=PC1, y=PC2, col=Color, label=rownames(PCma.gr))) +
xlab(PCs[1]) +
ylab(PCs[2]) +
geom_point(size=2,alpha=1,aes(shape=Color)) +
theme_classic() +
xlim(-25,25) +
ylim(-25,25) +
scale_shape_manual(values=c(17,18,17,17,17)) +
scale_color_manual(values=c("purple", "grey", "orange", "red", "forest green")) +
ggtitle("PCA all probes")
a
ggplotly(a)
a <- ggplot(PCma.gr,aes(x=PC1, y=PC2, col=Color, label=rownames(PCma.gr))) +
xlab(PCs[1]) +
ylab(PCs[2]) +
geom_point(size=2,alpha=1,aes(shape=Color)) +
theme_classic() +
xlim(-25,25) +
ylim(-25,25) +
scale_shape_manual(values=c(17,18,17,17,17)) +
scale_color_manual(values=c("grey","purple", "orange", "red", "forest green")) +
ggtitle("PCA all probes")
a
myCombat.sign[,c(1:7,12)]
colnames(myCombat.sign[,c(1:7,12)])
pca <- t(myCombat.sign)
pca <- as.data.frame(pca)
pca["Color"] <- as.character(myLoad$pd$Syndrome)
ma <- pca[c(1:(length(pca)-1))]
PCma <- prcomp(ma, center=T,scale.=T)
PCma.gr <- data.frame(PCma$x, Color=pca$Color)
PCs <- round(PCma$sdev^2 / sum(PCma$sdev^2) * 100, 2)
PCs <- paste(colnames(PCma.gr), "(", paste(as.character(PCs), "%", ")", sep=""))
a <- ggplot(PCma.gr,aes(x=PC1, y=PC2, col=Color, label=rownames(PCma.gr))) +
xlab(PCs[1]) +
ylab(PCs[2]) +
geom_point(size=2,alpha=1,aes(shape=Color)) +
theme_classic() +
xlim(-25,25) +
ylim(-25,25) +
scale_shape_manual(values=c(17,18,17,17,17)) +
scale_color_manual(values=c("purple", "grey", "orange", "red", "forest green")) +
ggtitle("PCA all probes")
a
ggplotly(a)
library("ChAMP")
library("tidyverse")
methylationarray <- "EPIC"
norm <- "BMIQ"
testDir <- "/home/francescoc/Desktop/Project/Merla_lab/Marray_Merla" #Directory che ti serve
myLoad <- champ.load(testDir,
method="ChAMP",
methValue="B",
autoimpute=TRUE,
filterDetP=TRUE,
ProbeCutoff=0,
SampleCutoff=0.1,
detPcut=0.01,
filterBeads=TRUE,
beadCutoff=0.05,
filterNoCG=TRUE,
filterSNPs=TRUE,
population=NULL,
filterMultiHit=TRUE,
filterXY=TRUE,
force=FALSE,
arraytype=methylationarray)
myNorm <- champ.norm(beta=myLoad$beta,
arraytype=methylationarray,
method=norm,
plotBMIQ = TRUE,
cores = 8)
library("ggfortify")
iris.pca.plot <- autoplot(sign.pca,
data = myCombat.sign)
sign.pca <- prcomp(myCombat.sign,
center = TRUE,
scale. = TRUE)
iris.pca.plot <- autoplot(sign.pca,
data = myCombat.sign)
iris.pca.plot
sign.pca <- prcomp(t(myCombat.sign),
center = TRUE,
scale. = TRUE)
iris.pca.plot <- autoplot(sign.pca,
data = myCombat.sign)
iris.pca.plot
sign.pca <- prcomp(t(myCombat.sign),
center = TRUE,
scale. = TRUE)
sign.pca
iris.pca.plot <- autoplot(sign.pca,
data = myCombat.sign)
iris.pca.plot <- autoplot(sign.pca,
data = t(myCombat.sign))
iris.pca.plot
library(tidyverse)
setwd("/home/francescoc/Desktop/Project/myco/assembly.480.1")
degs <- read.table("DEGs.txt")
genome <- read.csv("proteins_1026_300490.csv", header = T)
gpromoters <- read.table("inter.genes.promoters.bed")
a <- read.table("palindr.bed")
genes100 <- a %>%
filter(V12 %in% degs$V1) %>%
mutate(diff_plus=V3-V10,
diff_minus=V2-V11) %>%
filter(abs(diff_plus) < 100 | abs(diff_minus) < 100)
a <- read.table("palindr.bed")
View(a)
a <- read.table("palindr.bed")
genes100 <- a %>%
filter(V12 %in% degs$V1) %>%
mutate(diff_plus=V3-V10,
diff_minus=V2-V11) %>%
filter(abs(diff_plus) < 100 | abs(diff_minus) < 100)
genes100 <- a %>%
filter(V9 %in% degs$V1) %>%
mutate(diff_plus=V3-V10,
diff_minus=V2-V11) %>%
filter(abs(diff_plus) < 100 | abs(diff_minus) < 100)
genes100 <- a %>%
filter(V9 %in% degs$V1)
genes100
